Command:		/home/galexv/workshop_20191023/code/CA_excimedia_cxx/excimedia_graph.x field1000.bin output4.bin 12 40 0
Resources:		1 node (24 physical, 24 logical cores per node)
Memory:			125 GB per node
Tasks:			1 process
Machine:		nyx6195.arc-ts.umich.edu
Started on:		Tue Nov 5 11:43:55 2019
Total time:		29 seconds (0 minutes)
Executable:		excimedia_graph.x
Full path:		/home/galexv/workshop_20191023/code/CA_excimedia_cxx
Input file:		
Notes:			

Summary: excimedia_graph.x is Compute-bound in this configuration
Compute:				          97.1% |=========|
MPI:					           0.0% |
I/O:					           2.9% |
This application run was Compute-bound. A breakdown of this time and advice for investigating further is found in the CPU section below.
As very little time is spent in MPI calls, this code may also benefit from running at larger scales.

CPU:
A breakdown of the 97.1% total compute time:
Scalar numeric ops:			           3.2% |
Vector numeric ops:			           0.0% |
Memory accesses:			          96.8% |=========|
The per-core performance is memory-bound. Use a profiler to identify time-consuming loops and check their cache performance.
No time is spent in vectorized instructions. Check the compiler's vectorization advice to see why key loops could not be vectorized.

Threads:
A breakdown of how multiple threads were used:
Computation:				           0.0% |
Synchronization:			           0.0% |
Physical core utilization:		           4.0% |
System load:				          97.3% |=========|
No measurable time is spent in multithreaded code.
Physical core utilization is low. Try increasing the number of processes to improve performance.

MPI:
A breakdown of the 0.0% MPI time:
Time in collective calls:		           0.0% |
Time in point-to-point calls:		           0.0% |
Effective process collective rate:	              0 bytes/s
Effective process point-to-point rate:	              0 bytes/s
No time is spent in MPI operations. There's nothing to optimize here!


I/O:
A breakdown of the 2.9% I/O time:
Time in reads:				           0.0% |
Time in writes:				         100.0% |=========|
Effective process read rate:		              0 bytes/s
Effective process write rate:		       1.82e+08 bytes/s
Most of the time is spent in write operations with an average effective transfer rate. It may be possible to achieve faster effective transfer rates using asynchronous file operations.


Memory:
Per-process memory usage may also affect scaling:
Mean process memory usage:		       1.69e+08 bytes
Peak process memory usage:		       1.71e+08 bytes
Peak node memory usage:			          19.0% |=|
The peak node memory usage is very low. Running with fewer MPI processes and more data on each process may be more efficient.

